Rédiger des spécifications - La syntaxe Gherkin
===================================

Behat est un outil pour décrire le comportement de votre application. Ce
comportement est décrit dans une langue particulière, appelée *Gherkin*.

Gherkin est un langage "Spécifique à un Domaine fonctionnel, et lisible par
un Fonctionnel" <http://martinfowler.com/bliki/BusinessReadableDSL.html>`_,
et a été imaginé spécialement pour la description de comportements. Il vous
offre la possibilité d'abstraire les détails d'implémentation de vos tests
de comportement.

Gherkin a deux objectifs : servir de documentation fonctionnelle pour votre 
projet, et servir de tests automatisés. Behat offre même un bonus : il guide le
développeur en utilisant un vrai langage, humain, et lui dit ce que son code 
doit produire.

Si vous découvrez Behat, allez faire un tour sur le :doc:`/quick_intro`
d'abord, puis revenez ici pour en découvrir plus sur Gherkin.

La Syntaxe Gherkin
--------------

Comme c'est le cas pour YAML ou Python, Gherkin est une language "orienté
ligne", c'est-à-dire qu'il utilise les indentations pour définir sa structure.
Les fins de lignes terminent des instructions (appelées "étapes") ; les
espaces, comme les tabulations, peuvent être utilisée pour l'indentation. (Nous
suggérons d'utiliser les espaces, pour des raisons de portabilité). Pour finir,
la plupart des lignes écrite en Gherkin comment par un mot-clef spécial :

.. code-block:: gherkin

    Fonctionnalité: Une description de ce qui est attendu
      Afin de réaliser une action métier (domaine fonctionnel)
      En tant qu'acteur explicite du domaine fonctionnel
      Je dois tirer un bénéfice de cette fonctionnalité

      Scénario: Une description du scénario
          Étant donné que [un contexte]
          Et [plus d'informations sur le contexte]
          Quand [un événement]
          Et [un autre événement]
          Alors [résultat attendu]
          Et [un autre résultat attendu]
          Mais [un autre résultat attendu]

      Scénario: Une situation différente
          ...

L'interpréteur découpe les informations en Fonctionnalités, Scénarios puis
Étapes. Examinons plus en détail l'exemple ci dessus :

1. ``Fonctionnalité: Une description de ce qui est attendu`` démarre la
   fonctionnalité et lui donne un titre. Découvrez en plus sur les
   Fonctionnalités dans la section "`Fonctionnalités`_".

2. Behat ne va pas interpréter les 3 lignes suivantes (Afin de... En tant
   que... Je dois...). Ces lignes ne servent qu'à fournir un contexte
   fonctionnel/métier lié à votre fonctionnalité, dans votre application.

3. ``Scénario: Une description du scénario`` démarre le scénario, et contient
   une description du scénario. Découvrez en plus sur les
   Fonctionnalités dans la section "`Scénarios`_".

4. Les 7 lignes suivantes sont les Étapes du Scénario, chacune matchant une
   expression régulière définie ailleurs. Découvrez en plus sur les
   Étapes dans la section "`Étapes`_".

5. ``Scénario: Une situation différente`` démarre le scénario suivant, puis ça
   continue....

Quand vous exécutez la fonctionnalité, l'expression contenue dans chaque Étape
(après les mot-clefs comment ``Étant donné``, ``Et``, ``Quand``, etc.) est liée
à une expression régulière qui va la lier à une fonction PHP. Vous pouvez en
savoir plus sur le matching d'expression et leur exécution dans
:doc:`/guides/2.definitions`.

Fonctionnalités
--------

Chaque fichier ``*.feature`` ne doit contenir qu'une seule fonctionnalité. Le
fichier doit commencer par le mot-clef ``Fonctionnalité`` (ou sa traduction),
suivi par trois lignes indentées. Une fonctionnalité contient généralement une
liste de Scénarios. Vous pouvez écrire ce que vous voulez au dessus du premier
scénario (ce ne sera pas interpreté), qui démarrera avec le mot-clef
``Scénario`` (ou sa traduction). Vous pouvez enfin utiliser des `tags`_ pour
regrouper les fonctionnalités et les scénarios, indépendamment du fichier ou
du dossier dans lesquels ils sont situés.

.. note::

    Comme le Français n'est pas la langue par défaut de Behat, n'oubliez pas
    d'ajouter le commentaire ``# language: fr`` en haut de votre Fonctionnalité.

Chaque Scénario contient une liste d'`Étapes`, qui doivent débuter par le
mot-clef ``Étant donné``, ``Quand``, ``Alors``, ``Et`` ou ``Mais``. Behat ne
fait aucune différence entre ces mot-clefs, mais ils sont important pour les
humains. Voici un exemple :

.. code-block:: gherkin

    Fonctionnalité: Servir du café
      Afin de gagner de l'argent
      Les clients doivent être capables
      d'acheter du café à toutes heures

      Scénario: Acheter le dernier café
        Étant donné qu'il reste 1 café dans la machine
        Et que j'ai mis 1 dollar
        Quand j'appuie sur le bouton de la machine
        Alors je devrai recevoir un café

En plus des `scénarios`_ de base, une fonctionnalité peut contenir des
 `Plans de scénario`_ et des `Contextes`_.

Scénarios
---------

Le Scénario est une des structures à la base de Gherkin. Chaque schénario
démarre avec le mot-clef ``Scénario`` (ou sa traduction), suivi par un titre de
scénario optionnel. Chaque fonctionnalité peut être composée de un ou de
plusieurs scénarios, et chaque scénario consiste en une ou plusieurs
`étapes`_.

Les scénarios suivants sont composés de 3 étapes :

.. code-block:: gherkin

  Scenario: Wilson publie sur son propre blog
    Étant donné que je suis connecté en tant que Wilson
    Quand je tente de publier pour "Le Blog de Wilson"
    Alors je dois voir "Votre article a été publié"

  Scenario: Wilson échoue lorsqu'il tente de publier sur un autre blog
    Étant donné que je suis connecté en tant que Wilson
    Quand je tente de publier pour "Le Blog de Greg"
    Alors je dois voir "Hé! Ce n'est pas votre blog !"

  Scenario: Greg publie sur son propre blog
    Étant donné que je suis connecté en tant que Greg
    Quand je tente de publier pour "Le Blog de Greg"
    Alors je dois voir "Votre article a été publié"

Plans de scénario
-----------------

Copier-coller des scénarios pour utiliser différentes valeurs peut être vite
fastidieux et répétitif :

.. code-block:: gherkin

    Scenario: En manger 5 sur 12
      Étant donné qu'il y a 12 concombres
      Quand je mange 5 concombres
      Alors je dois avoir 7 concombres

    Scenario: En manger 5 sur 20
      Étant donné qu'il y a 20 concombres
      Quand je mange 5 concombres
      Alors je dois avoir 15 concombres

Les Plans de scénarios vous permettent d'exprimer ces exemples en utilisant
un tableau juste derrière votre scénario :

.. code-block:: gherkin

    Plan de scénario: Manger
      Étant donné qu'il y a <initial> concombres
      Quand je mange <mangés> concombres
      Alors je dois avoir <restant> concombres

      Exemples:
        | initial | mangés | restant |
        |  12     |  5     |  7   |
        |  20     |  5     |  15  |

Les Plans de scénario fournissent un modèle qui n'est jamais exécuté d'un coup.
Un Plan de scénario est en réalité exécuté pour chacune des lignes qui composent
la section d'Exemples qui le suit (en excluant bien entendu la première ligne 
d'en-tête).

Le Plan de scénario utilise des marqueurs, qui sont contenus à l'intérieur des
``< >`` dans les étapes. Par exemple :

.. code-block:: gherkin

    Étant donné <Je suis un marqueur valide>

Représentez-vous un marqueur comme une variable. Il sera remplacé par une 
valeur bien réelle issue du tableau d'``Exemples:``. La valeur substituée au
marqueur change à chaque boucle dans l'exécution du Scénario attendu, jusqu'à
ce que la fin du tableau d'``Exemples`` soit atteinte.

.. tip::

    Vous pouvez également utiliser des marqueurs dans des `Arguments multi-lignes`_.

.. note::

    Vos définitions d'étapes ne doivent jamais matcher le contenu du marqueyr
    lui-même, mais doivent s'occuper uniquement de la valeur qui remplacera le
    marqueur.

Lorsqu'on exécute la première ligne de notre exemple :

.. code-block:: gherkin

    Plan de scénario: Manger
      Étant donné qu'il y a <initial> concombres
      Quand je mange <mangés> concombres
      Alors je dois avoir <restant> concombres

      Exemples:
        | initial | mangés | restant |
        |  12     |  5     |  7   |
        |  20     |  5     |  15  |

Le scénario qui est en train de s'exécuter alors est :

.. code-block:: gherkin

    Plan de scénario: Manger
      # <initial> est remplacé par 12 :
      Étant donné qu'il y a <initial> concombres
      # <mangés> est remplacé par 5 :
      Quand je mange <mangés> concombres
      # <restant> est remplacé par 7 :
      Alors je dois avoir <restant> concombres

Contextes
-----------

Les Contextes vous permettent d'ajouter une toile de fond commune à l'ensemble 
des scénarios d'une fonctionnalité en une seule fois. Un Contexte est comme 
un Scénario sans titre, et contient plusieurs étapes. La différence 
fondamentale c'est que le Contexte sera appelé avant chacun de vos scénarios 
(mais juste après vos Hoosk ``BeforeScenario`` (:doc:`/guides/3.hooks`)).

.. code-block:: gherkin

    Feature: Multiple site support

      Background:
        Given a global administrator named "Greg"
        And a blog named "Greg's anti-tax rants"
        And a customer named "Wilson"
        And a blog named "Expensive Therapy" owned by "Wilson"

      Scenario: Wilson posts to his own blog
        Given I am logged in as Wilson
        When I try to post to "Expensive Therapy"
        Then I should see "Your article was published."

      Scenario: Greg posts to a client's blog
        Given I am logged in as Greg
        When I try to post to "Expensive Therapy"
        Then I should see "Your article was published."

Steps
-----

Les `Fonctionnalités`_ sont composées d'étapes, c'est-à-dire `Étant donné`_,
`Quand`_ and `Alors`_.

Behat ne distingue pas techniquement ces trois types d'étapes. Cependant, nous
vous recommandons très fortement de le faire vous ! Ces mot-clefs ont été
choisis avec soin parce qu'ils répondent à leur objectif, objectif que vous
devez garder en tête pour faire du Développement Piloté par le Comportement.

Robert C. Martin a écrit un `bon billet <http://blog.objectmentor.com/articles/2008/11/27/the-truth-about-bdd>`_
sur les concepts "Étant donné - Quand - Alors" du BDD, dans lequel il les pense
comme un Automate fini (également désigné en Anglais par FSM, ou Finite State Machine).

Étant donné
~~~~~~

L'objectif des étapes **Étant donné que** est de **mettre le système dans un état
connu**, ceci avant que l'utilisateur (ou une entité externe) ne commence à
intéragir avec le système (dans l'étape "Quand"). Il faut éviter de parler
des interactions de l'utilisateur dans les étapes "Étant donné".

Si vous avez l'habitude de travailler avec des Cas d'Utilisation, cette étape
correspond à vos "Préconditions".

.. note::

    Voici deux bons exemples d'utilisation de **Étant donné** :

    * Pour créer des enregistrements ou pour initialiser la base de données :

        .. code-block:: gherkin

            Étant donné qu'il n'y à aucun utilisateur sur le site
            Étant donné que la base de données est vierge

    * Pour authentifier l'utilisateur (une exception au principe de non-interaction
      mentionné plus haut) :

        .. code-block:: gherkin

            Étant donné que je suis connecté en tant que "Jean-François"

.. tip::

    Il est autorisé ici d'intéragir directement avec les couches inférieures
    plutôt qu'avec la couche graphique (en Symfony ou Zend Framework :
    communiquer avec les models)

Et nous recommandons aux utilisateurs de Symfony d'utiliser les étapes "Étant
donné" avec des paramètres de type `tableaux`, afin d'initialiser directement des
enregistrements plutôt que des Données de test (fixtures). De cette manière, quand
vous lirez le scénario, vous trouverez directeemnt toutes les informations
nécessaires sans avoir à sauter d'un fichier à l'autre :

.. code-block:: gherkin

    Étant donné qu'il y a les utilisateurs:
      | nom      | motdepasse | email               |
      | everzet  | 123456     | everzet@knplabs.com |
      | fabpot   | 22@222     | fabpot@symfony.com  |

Quand
~~~~~

L'objectif des étapes **Quand** est de **décrire l'action-clef** que l'utilisateur
effectue (ou, en utilisant la métaphore de Robert C. Martin, la l'état de transition).

.. note::

    Voici deux bons exemples d'utilisation de **Quand** :

    * Interagir avec une page web (la librairie Mink offre des outils conviviaux
      pour le web) :

        .. code-block:: gherkin

            Quand je suis sir "une/page"
            Quand je remplis "identifiant" avec "Jean-François"
            Quand je remplis "mot de passe" avec "123456"
            Quand je presse "Connexion"

    * Interagir avec une librairie en lignes de commandes Interact with some CLI
      library :

        .. code-block:: gherkin

            Quand j'exécute la commande "ls -la"

Alors
~~~~~

L'objectif des étapes **Alors** est **d'observer les résultats". Les observations
doivent être mises en relation avec les bénéfices métiers décrits dans la fonctionnalité.
Les observations doivent surveiller les sorties du système (les rapports, l'interface
utilisateur, les messages, les sorties d'écran), et non pas ce qui est profondément enfoui
dans le système (qui n'a aucune valeur commerciale, mais est plutôt un moyen pour
la mise en oeuvre).

Voici deux bons exemples d'utilisation de **Alors** :

* Vérifier que quelque chose, relatif au "Étant donné" + "Quand", est (ou n'est pas)
  présent dans le flux de sortie.
* Regarder si quelque chose externe au système a bien reçu un message attendu
  (est-ce qu'un email, avec tel contenu, a bien été envoyé ?)

.. code-block:: gherkin

    Quand j'éxecute la commande "echo bonjour"
    Alors la sortie devrait être "bonjour"

.. note::

    Bien qu'il puisse être tentant de mettre en place des outils pour inspecter
    la base de données, résistez à la tentation.

    Vous ne devriez vérifier que ce qu'i est observable par l'utilisateur (ou un
    système externe). Les données de votre base de données ne sont visibles que
    pour votre application, mais sont au bout du compte visibles quelque part
    pour l'utilisateur par un message, un écran, un email...

Et, Mais
~~~~~~~~

Si vous avez plusieurs étapes "Étant donné", "Quand" ou "Alors", vous pouvez écrire :

.. code-block:: gherkin

    Scénario: Plusieurs Étant donné
      Étant donné que quelque chose
      Étant donné autre chose
      Étant donné une autre chose yet an other thing
      Quand j'ouvre mes yeux
      Alors je vois quelque chose
      Alors je ne vois rien d'autre

Ou bien vous pouvez utiliser les étapes **Et** ou **Mais**, qui vous permettent
de lire vos scénarios plus facilement :

.. code-block:: gherkin

    Scénario: Plusieurs Étant donné
      Étant donné que quelque chose
      Et que autre chose
      Et que une autre chose yet an other thing
      Quand j'ouvre mes yeux
      Alors je vois quelque chose
      Mais je ne vois rien d'autre

Si vous le préferez, vous pouvez même indenter vos étapes d'une manière plus usuelle en
*programmation*, pour mettre votre code actuel en retrait et offrir un meilleur
aspect visuel :

.. code-block:: gherkin

    Scénario: Plusieurs Étant donné
      Étant donné que quelque chose
               Et que autre chose
               Et que une autre chose yet an other thing
            Quand j'ouvre mes yeux
            Alors je vois quelque chose
             Mais je ne vois rien d'autre

Behat interprète les étapes qui commencent par Et ou Mais exactement comme
toutes les autres étapes. Behat ne fait pas de différence entre les étapes, mais,
ne l'oubliez pas, c'est à vous de le faire !

Arguments multi-lignes
-------------------

L'expression régulière qui intercepte les `étapes`_ vous permet de capturer les
courtes expressions de vos étapes et de les recevoir comme des définitions d'étapes.
Cependant, vous aurez parfois envie de recevoir une structure de données plus riche
dans votre définition.

C'est à ça que servent les Arguments multi-lignes. Il sont rédigés sur plusieurs
lignes, directement après une étape, et sont passés à al définition d'étape comme
dernier paramètre.

Les Arguments multi-lignes sont utilisables de deux manières : Les `tableaux`_ ou
les `Expressions longues`_.

Tableaux
~~~~~~

Les tableaux fournis comme paramètre sont pratiques pour spécifier un ensemble
plus vaste de données - le plus souvent comme une entrée pour un "Étant donné",
ou comme une sortie pour un "Alors".

.. code-block:: gherkin

    Scénario:
      Étant donné que les personnes suivantes existent :
        | nom   | email           | téléphone |
        | Aslak | aslak@email.com | 123       |
        | Joe   | joe@email.com   | 234       |
        | Bryan | bryan@email.org | 456       |

.. note::

    Ne confondez pas les tableaux avec les `Plans de scénario`_. ; ils sont
    syntaxiquement identiques, mais ont des buts différents.

.. tip::

    Une définition d'étape pour cette étape devrait ressembler à ceci :

    .. code-block:: php

        /**
         * @Given /les personnes suivantes existent:/
         */
        public function lesPersonnesSuivantesExistent(TableNode $table)
        {
            $hash = $table->getHash();
            foreach ($hash as $row) {
                // $row['nom'], $row['email'], $row['téléphone']
            }
        }

.. note::

    Un tableau est fourni à la définition sous forme d'un objet ``TableNode``,
    à partir duquel vous pouvez récupérer les informations par colonne
    A table is injected into a definition as a ``TableNode`` object, from
    (méthode ``TableNode::getHash()``) ou par ligne (``TableNode::getRowsHash()``).

PyStrings
~~~~~~~~~

Multiline Strings (also known as PyStrings) are handy for specifying a larger
piece of text. This is done using the so-called PyString syntax. The text
should be offset by delimiters consisting of three double-quote marks
(``"""``) on lines by themselves:

.. code-block:: gherkin

    Scenario:
      Given a blog post named "Random" with:
        """
        Some Title, Eh?
        ===============
        Here is the first paragraph of my blog post.
        Lorem ipsum dolor sit amet, consectetur adipiscing
        elit.
        """

.. note::

    The inspiration for PyString comes from Python where ``"""`` is used to
    delineate docstrings, much in the way ``/* ... */`` is used for multiline
    docblocks in PHP.

.. tip::

    In your step definition, there's no need to find this text and match it in
    your regular expression. The text will automatically be passed as the last
    argument into the step definition method. For example:

    .. code-block:: php

        /**
         * @Given /a blog post named "([^"]+)" with:/
         */
        public function blogPost($title, PyStringNode $markdown)
        {
            $this->createPost($title, $markdown->getRaw());
        }

.. note::

    PyStrings are stored in a ``PyStringNode`` instance, which you can simply
    convert to a string with ``(string) $pystring`` or ``$pystring->getRaw()``
    as in the example above.

.. note::

    Indentation of the opening ``"""`` is not important, although common practice
    is two spaces in from the enclosing step. The indentation inside the triple
    quotes, however, is significant. Each line of the string passed to the step
    definition's callback will be de-indented according to the opening ``"""``.
    Indentation beyond the column of the opening ``"""`` will therefore be
    preserved.

Tags
----

Tags are a great way to organize your features and scenarios. Consider this
example:

.. code-block:: gherkin

    @billing
    Feature: Verify billing

      @important
      Scenario: Missing product description

      Scenario: Several products

A Scenario or Feature can have as many tags as you like, just separate them
with spaces:

.. code-block:: gherkin

    @billing @bicker @annoy
    Feature: Verify billing

.. note::

    If a tag exists on a ``Feature``, Behat will assign that tag to all
    child ``Scenarios`` and ``Scenario Outlines`` too.

Gherkin in Many Languages
-------------------------

Gherkin is available in many languages, allowing you to write stories
using localized keywords from your language. In other words, if you
speak French, you can use the word ``Fonctionnalité`` instead of ``Feature``.

To check if Behat and Gherkin support your language (for example, French),
run:

.. code-block:: bash

    behat --story-syntax --lang=fr

.. note::

    Keep in mind that any language different from ``en`` should be explicitly
    marked with a ``# language: ...`` comment at the beginning of your
    ``*.feature`` file:

    .. code-block:: gherkin

        # language: fr
        Fonctionnalité: ...
          ...

    This way your features will hold all the information about its content
    type, which is very important for methodologies like BDD, and will also give
    Behat the ability to have multilanguage features in one suite.

